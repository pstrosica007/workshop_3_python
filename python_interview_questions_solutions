### 1. Jaký je rozdíl mezi `list`, `tuple`, `set` a `dict`?

| Typ   | Seřazený | Unikátní prvky | Mutable | Inicializace | Přidání     | Odebrání    |
| ----- | -------- | -------------- | ------- | ------------ | ----------- | ----------- |
| list  | ✅        | ❌           | ✅      | `[1, 2, 3]`  | `.append()` | `.remove()` |
| tuple | ✅        | ❌           | ❌      | `(1, 2, 3)`  | nelze       | nelze       |
| set   | ❌        | ✅           | ✅      | `{1, 2, 3}`  | `.add()`    | `.remove()` |
| dict  | ❌        | ✅ (klíče)   | ✅      | `{"a": 1}`   | `d[k] = v`  | `del d[k]`  |

**Ukázka kódu:**

```python
my_list = [1, 2, 3]
my_tuple = (1, 2, 3)
my_set = {1, 2, 3}
my_dict = {"a": 1, "b": 2}
```

**Kdy co použít?**

* `list`: když potřebuješ zachovat pořadí a často měníš data.
* `tuple`: pro konstantní sekvence, např. souřadnice nebo návrat více hodnot.
* `set`: když tě zajímají pouze unikátní hodnoty.
* `dict`: když chceš ukládat páry klíč-hodnota.

---

### 2. Co je to mutabilita? Které datové typy jsou mutable a které ne?

**Mutabilita** znamená schopnost objektu měnit svůj obsah bez změny jeho identity.

| Datový typ     | Mutable |
| -------------- | ------- |
| `int`, `float` | ❌      |
| `str`          | ❌      |
| `tuple`        | ❌      |
| `list`         | ✅      |
| `dict`         | ✅      |
| `set`          | ✅      |

---

### 3. Jak funguje `*args` a `**kwargs`?

* `*args` sbírá všechny poziční argumenty do `tuple`
* `**kwargs` sbírá všechny pojmenované argumenty do `dict`

**Ukázka:**

```python
def my_func(*args, **kwargs):
    print("args:", args)
    print("kwargs:", kwargs)

my_func(1, 2, 3, a=10, b=20)
# args: (1, 2, 3)
# kwargs: {'a': 10, 'b': 20}
```

---

### 4. Jaký je rozdíl mezi `is` a `==`?

* `==` porovnává hodnotu objektů
* `is` porovnává identitu objektů (jestli ukazují na stejný objekt v paměti)

**Ukázka:**

```python
a = [1, 2, 3]
b = a
c = [1, 2, 3]

print(a == c)  # True
print(a is c)  # False
print(a is b)  # True
```

---

### 5. Co je to list comprehension?

Zkrácený zápis pro tvorbu seznamů z iterovatelných objektů.

**Ukázka:**

```python
numbers = [1, 2, 3, 4]
squares = [n**2 for n in numbers]  # [1, 4, 9, 16]
```

Výhoda: přehledný a efektivní zápis bez nutnosti vytvářet nový prázdný seznam a cyklus `for`.

---

### 6. Co dělá `@staticmethod` vs `@classmethod`?

* `@staticmethod`: metoda, která nevyužívá instanci ani třídu – chová se jako běžná funkce, ale je součástí třídy kvůli logickému uspořádání.
* `@classmethod`: metoda, která má přístup k samotné třídě (`cls`) – používá se např. pro alternativní konstruktory.

**Příklad:**

```python
class Example:
    @staticmethod
    def static_hello():
        return "Hello from static!"

    @classmethod
    def class_hello(cls):
        return f"Hello from {cls.__name__}"
```

---

### 7. Co je to `__init__` a proč ho používáme?

Je to konstruktor třídy – spustí se při vytvoření instance a inicializuje její vlastnosti.

**Ukázka:**

```python
class Device:
    def __init__(self, name, status):
        self.name = name
        self.status = status

printer = Device("HP LaserJet", "online")
print(printer.name)  # HP LaserJet
```

---

### 8. Co je PEP8?

PEP8 je oficiální dokument, který definuje doporučení pro styl psaní Python kódu.

**Top 10 pravidel:**

1. Používej odsazení 4 mezery.
2. Maximální délka řádku je 79 znaků.
3. Používej smysluplné názvy proměnných.
4. Funkce a proměnné píš `lower_case_with_underscores`.
5. Třídy píš `CamelCase`.
6. Importy piš na začátku souboru ve třech blocích: standardní knihovna, 3rd party, vlastní moduly.
7. Mezera kolem operátorů: `a = b + c`, ne `a=b+c`.
8. Prázdný řádek mezi funkcemi a metodami.
9. Komentuj jen to, co není zřejmé z kódu.
10. Používej `docstring` pro dokumentaci funkcí a tříd.

---

(Pokračování připravím v dalším kroku)
